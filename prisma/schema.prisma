generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  store Store?
  isSeller Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]
  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String? @unique
  description   String?
  address String?
  phone String?
  storeAvatarUrl String?
  storeBannerUrl String? 
  userId        String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[]  @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  storeId String @db.ObjectId
  store Store @relation("StoreToCategory",fields: [storeId], references: [id])
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  value String
  productSize ProductSize[]
  storeId String @db.ObjectId
  store Store @relation("StoreToSize",fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  value String
  productColor ProductColor[]
  storeId String @db.ObjectId
  store Store @relation("StoreToColor",fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  price Float   
  discount Float?   
  isFeatured Boolean @default(false)
  description String?
  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id])
  productColor ProductColor[]
  productSize ProductSize[]
  images Image[]
  storeId String @db.ObjectId
  store Store @relation("StoreToProduct", fields:[storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ProductColor {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  colorId String @db.ObjectId
  color Color @relation(fields: [colorId], references: [id],onDelete: Cascade)
}
model ProductSize {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId
  sizeId String @db.ObjectId
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}